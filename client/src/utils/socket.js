import { io } from "socket.io-client";

let socketInstance = null;

export const initializeSocket = (projectId) => {
  if (socketInstance) return socketInstance; // Avoid multiple connections

  const token = localStorage.getItem("token");
  console.log("üîç Token before sending:", token);

  const options = {
    transports: ["websocket"], // ‚úÖ Force WebSocket only
    withCredentials: true, // ‚úÖ Ensure credentials are sent
    reconnection: true, // ‚úÖ Enable auto-reconnection
    reconnectionAttempts: 5, // ‚úÖ Retry 5 times before giving up
    reconnectionDelay: 2000, // ‚úÖ Wait 2s before trying again
  };

  if (token) {
    options.auth = { token: `Bearer ${token}` }; // ‚úÖ Pass token only if it exists
  }

  if (projectId) {
    options.query = { projectId }; // ‚úÖ Include only if defined
  }

  socketInstance = io("https://sakhi-nltm.onrender.com", options);

  socketInstance.on("connect", () => {
    console.log("‚úÖ WebSocket Connected:", socketInstance?.id);
  });

  socketInstance.on("disconnect", (reason) => {
    console.warn("‚ö†Ô∏è WebSocket Disconnected:", reason);
  });

  socketInstance.on("connect_error", (error) => {
    console.warn("‚ö†Ô∏è WebSocket Connection Error:", error);
  });

  return socketInstance;
};

export const sendMessage = (eventName, data) => {
  if (!socketInstance) {
    console.warn("‚ö†Ô∏è Cannot send message, socket not initialized.");
    return;
  }
  socketInstance.emit(eventName, data);
};

export const receiveMessage = (eventName, cb) => {
  if (!socketInstance) {
    console.warn("‚ö†Ô∏è No active socket connection.");
    return;
  }
  socketInstance.on(eventName, cb);
};
